"""Initial

Revision ID: 26a74f23db91
Revises: 
Create Date: 2023-04-09 23:17:58.786729

"""
from alembic import op
import sqlalchemy as sa
import geoalchemy2
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '26a74f23db91'
down_revision = None
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('block',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('name', sa.String(), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.create_index(op.f('ix_block_id'), 'block', ['id'], unique=False)
    op.create_table('document',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('name', sa.String(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('file', sa.LargeBinary(), nullable=True),
    sa.Column('status', sa.Enum('loaded', 'markingup', 'markup', 'approving', 'approve', name='documentstatus'), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_document_id'), 'document', ['id'], unique=False)
    op.create_table('location',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('name', sa.String(), nullable=True),
    sa.Column('geometry', geoalchemy2.types.Geometry(from_text='ST_GeomFromEWKT', name='geometry'), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    # op.create_index('idx_location_geometry', 'location', ['geometry'], unique=False, postgresql_using='gist')
    op.create_index(op.f('ix_location_id'), 'location', ['id'], unique=False)
    op.create_table('theme',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('name', sa.String(), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.create_index(op.f('ix_theme_id'), 'theme', ['id'], unique=False)
    op.create_table('approvedblock',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('block_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.ForeignKeyConstraint(['block_id'], ['block.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_approvedblock_id'), 'approvedblock', ['id'], unique=False)
    op.create_table('approvedlocation',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('location_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.ForeignKeyConstraint(['location_id'], ['location.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_approvedlocation_id'), 'approvedlocation', ['id'], unique=False)
    op.create_table('approvedtheme',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('theme_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.ForeignKeyConstraint(['theme_id'], ['theme.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_approvedtheme_id'), 'approvedtheme', ['id'], unique=False)
    op.create_table('message',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('text', sa.String(), nullable=True),
    sa.Column('document_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('block_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('theme_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('location_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.ForeignKeyConstraint(['block_id'], ['approvedblock.id'], ),
    sa.ForeignKeyConstraint(['document_id'], ['document.id'], ),
    sa.ForeignKeyConstraint(['location_id'], ['approvedlocation.id'], ),
    sa.ForeignKeyConstraint(['theme_id'], ['approvedtheme.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_message_id'), 'message', ['id'], unique=False)
    op.create_table('recognitionblock',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('probability', sa.Float(), nullable=True),
    sa.Column('block_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('message_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.ForeignKeyConstraint(['block_id'], ['block.id'], ),
    sa.ForeignKeyConstraint(['message_id'], ['message.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_recognitionblock_id'), 'recognitionblock', ['id'], unique=False)
    op.create_table('recognitionlocation',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('probability', sa.Float(), nullable=True),
    sa.Column('location_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('message_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.ForeignKeyConstraint(['location_id'], ['location.id'], ),
    sa.ForeignKeyConstraint(['message_id'], ['message.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_recognitionlocation_id'), 'recognitionlocation', ['id'], unique=False)
    op.create_table('recognitiontheme',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('probability', sa.Float(), nullable=True),
    sa.Column('theme_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('message_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.ForeignKeyConstraint(['message_id'], ['message.id'], ),
    sa.ForeignKeyConstraint(['theme_id'], ['theme.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_recognitiontheme_id'), 'recognitiontheme', ['id'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_recognitiontheme_id'), table_name='recognitiontheme')
    op.drop_table('recognitiontheme')
    op.drop_index(op.f('ix_recognitionlocation_id'), table_name='recognitionlocation')
    op.drop_table('recognitionlocation')
    op.drop_index(op.f('ix_recognitionblock_id'), table_name='recognitionblock')
    op.drop_table('recognitionblock')
    op.drop_index(op.f('ix_message_id'), table_name='message')
    op.drop_table('message')
    op.drop_index(op.f('ix_approvedtheme_id'), table_name='approvedtheme')
    op.drop_table('approvedtheme')
    op.drop_index(op.f('ix_approvedlocation_id'), table_name='approvedlocation')
    op.drop_table('approvedlocation')
    op.drop_index(op.f('ix_approvedblock_id'), table_name='approvedblock')
    op.drop_table('approvedblock')
    op.drop_index(op.f('ix_theme_id'), table_name='theme')
    op.drop_table('theme')
    op.drop_index(op.f('ix_location_id'), table_name='location')
    # op.drop_index('idx_location_geometry', table_name='location', postgresql_using='gist')
    op.drop_table('location')
    op.drop_index(op.f('ix_document_id'), table_name='document')
    op.drop_table('document')
    op.drop_index(op.f('ix_block_id'), table_name='block')
    op.drop_table('block')
    # ### end Alembic commands ###
