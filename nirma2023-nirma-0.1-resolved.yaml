---
openapi: 3.0.0
info:
  title: NIRMA
  description: |
    https://docs.google.com/document/d/1Y_FB-x4G35td31U3XQIn2vykNnB0wMqeLrjaCuzRqpU/edit
  version: "0.1"
servers:
- url: https://virtserver.swaggerhub.com/nirma2023/nirma/1.0.0
  description: SwaggerHub API Auto Mocking
tags:
- name: document
- name: message
paths:
  /documents:
    get:
      tags:
      - document
      summary: Get list of all documents
      operationId: getDocuments
      responses:
        "200":
          description: Successfull request
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Document'
    post:
      tags:
      - document
      summary: Add a new document
      operationId: addDocument
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/documents_body'
      responses:
        "200":
          description: File successfully uploaded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Document'
        "422":
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /documents/{fileId}/:
    delete:
      tags:
      - document
      summary: Deletes a document
      operationId: deleteDocument
      parameters:
      - name: fileId
        in: path
        description: Document id to delete
        required: true
        style: simple
        explode: false
        schema:
          type: string
          format: uuid
          example: e0c72ac6-3ca9-4775-8ef8-fd15028f961e
      responses:
        "204":
          description: Document successfully deleted
        "404":
          description: Document not found
        "422":
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /documents/{fileId}/{status}:
    get:
      tags:
      - document
      summary: Get a document
      operationId: getDocument
      parameters:
      - name: fileId
        in: path
        description: Document id to get
        required: true
        style: simple
        explode: false
        schema:
          type: string
          format: uuid
          example: e0c72ac6-3ca9-4775-8ef8-fd15028f961e
      - name: status
        in: path
        description: Document status
        required: true
        style: simple
        explode: false
        schema:
          type: string
          default: initial
          enum:
          - initial
          - markup
          - approve
      responses:
        "200":
          description: Document with {fileId} and {status}
          content:
            multipart/form-data:
              schema:
                $ref: '#/components/schemas/inline_response_200'
        "404":
          description: Document not found
        "422":
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /documents/{fileId}:
    get:
      tags:
      - message
      summary: Get messages of a document
      operationId: getMessages
      parameters:
      - name: fileId
        in: path
        description: Document id to extract messages
        required: true
        style: simple
        explode: false
        schema:
          type: string
          format: uuid
          example: e0c72ac6-3ca9-4775-8ef8-fd15028f961e
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Message'
        "404":
          description: Document not found
        "422":
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /messages/{messageId}/approve/{fieldType}:
    patch:
      tags:
      - message
      summary: Approve field of a message
      operationId: approveMessage
      parameters:
      - name: messageId
        in: path
        description: Message id to approve
        required: true
        style: simple
        explode: false
        schema:
          type: string
          format: uuid
          example: e0c72ac6-3ca9-4775-8ef8-fd15028f961e
      - name: fieldType
        in: path
        description: Message id to approve
        required: true
        style: simple
        explode: false
        schema:
          type: string
          default: block
          enum:
          - block
          - theme
          - location
      requestBody:
        description: Approved field value
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/approve_fieldType_body'
        required: true
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Message'
        "404":
          description: Document not found
        "422":
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
components:
  schemas:
    ApprovedValue:
      type: object
      properties:
        value:
          type: string
          example: block1
    BlockThemeField:
      required:
      - recognizedValues
      type: object
      properties:
        approvedValue:
          type: string
          description: Empty if not approved
          example: block1
        recognizedValues:
          type: array
          description: ML recognized values of block or theme
          items:
            $ref: '#/components/schemas/BlockThemeField_recognizedValues'
    Location:
      required:
      - latitude
      - longitude
      type: object
      properties:
        latitude:
          type: number
          format: double
          example: 348543.4643593878
        longitude:
          type: number
          format: double
          example: 6646983.324477261
    LocationField:
      type: object
      properties:
        approvedValue:
          $ref: '#/components/schemas/Location'
        coordinates:
          type: array
          items:
            $ref: '#/components/schemas/LocationField_coordinates'
    Message:
      required:
      - block
      - createdAt
      - messageId
      - text
      - theme
      type: object
      properties:
        messageId:
          type: string
          format: uuid
          example: e0c72ac6-3ca9-4775-8ef8-fd15028f961e
        createdAt:
          type: string
          format: date-time
        text:
          type: string
          example: Here's the message body
        block:
          $ref: '#/components/schemas/BlockThemeField'
        theme:
          $ref: '#/components/schemas/BlockThemeField'
        location:
          $ref: '#/components/schemas/LocationField'
    Document:
      required:
      - createdAt
      - fileId
      - name
      type: object
      properties:
        fileId:
          type: string
          format: uuid
          example: e0c72ac6-3ca9-4775-8ef8-fd15028f961e
        createdAt:
          type: string
          format: date-time
        name:
          type: string
          example: mock.txt
    HTTPValidationError:
      title: HTTPValidationError
      type: object
      properties:
        detail:
          title: Detail
          type: array
          items:
            $ref: '#/components/schemas/ValidationError'
    ValidationError:
      title: ValidationError
      required:
      - loc
      - msg
      - type
      type: object
      properties:
        loc:
          title: Location
          type: array
          items:
            anyOf:
            - type: string
            - type: integer
        msg:
          title: Message
          type: string
        type:
          title: Error Type
          type: string
    documents_body:
      required:
      - file
      type: object
      properties:
        file:
          title: Document
          type: string
          format: binary
    inline_response_200:
      type: object
      properties:
        file:
          type: string
          description: Binary file
          format: binary
    approve_fieldType_body:
      oneOf:
      - $ref: '#/components/schemas/ApprovedValue'
      - $ref: '#/components/schemas/Location'
    BlockThemeField_recognizedValues:
      type: object
      properties:
        value:
          type: string
          example: block1
        probability:
          type: number
          format: double
          example: 0.9999999
    LocationField_coordinates:
      type: object
      properties:
        probability:
          type: number
          format: double
        location:
          $ref: '#/components/schemas/Location'
